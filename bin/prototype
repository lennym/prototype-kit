#! /usr/bin/env node

const path = require('path');
const args = require('minimist')(process.argv.slice(2));
const chokidar = require('chokidar');
const { throttle } = require('lodash');

const dir = args._[0] || '.';
const rootDir = path.resolve(process.cwd(), dir);

const App = require('../lib/server');
const Compiler = require('../lib/compile-js');

require('babel-register')({
  ignore: /node_modules/,
  extensions: ['.jsx'],
  cache: true,
  presets: ['es2015', 'react']
});

const PORT = process.env.PORT || 0;

let server;

const shouldRestart = file => {
  if (path.extname(file).match(/.js(x)?/)) {
    restart(file);
  }
};

const restart = throttle((file) => {
  console.log(`File change detected: ${file}`);
  console.log('Restarting server...');
  if (server) {
    server.close(() => {
      start({ compile: false });
    });
  }
}, 1000);

const start = ({ compile }) => {
  return Promise.resolve()
    .then(() => {
      if (compile) {
        return Compiler(rootDir);
      }
    })
    .then(() => {
      return App(rootDir);
    })
    .then(app => {
      return new Promise((resolve, reject) => {
        server = app.listen(PORT, (err) => {
          return err ? reject(err) : resolve();
        });
      });
    })
    .then(() => {
      console.log(`Prototype running at: http://localhost:${server.address().port}`);
    });
};

start({ compile: true })
  .then(() => {
    if (args.watch) {
      const watcher = chokidar.watch([dir, path.resolve(__dirname, '..')], {
        ignored: ['.DS_Store', /node_modules/, /.git/],
        ignoreInitial: true
      });

      watcher.on('change', shouldRestart);
      watcher.on('add', shouldRestart);
      watcher.on('unlink', shouldRestart);
    }
  })
  .catch(e => {
    console.error(e);
    process.exit(1);
  });
